// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: proto/torresix.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TorreClient is the client API for Torre service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TorreClient interface {
	// Sends a a request to predict a result of AI
	TorrePredict(ctx context.Context, in *TorreRequest, opts ...grpc.CallOption) (*TorreReply, error)
}

type torreClient struct {
	cc grpc.ClientConnInterface
}

func NewTorreClient(cc grpc.ClientConnInterface) TorreClient {
	return &torreClient{cc}
}

func (c *torreClient) TorrePredict(ctx context.Context, in *TorreRequest, opts ...grpc.CallOption) (*TorreReply, error) {
	out := new(TorreReply)
	err := c.cc.Invoke(ctx, "/torresix.Torre/TorrePredict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TorreServer is the server API for Torre service.
// All implementations must embed UnimplementedTorreServer
// for forward compatibility
type TorreServer interface {
	// Sends a a request to predict a result of AI
	TorrePredict(context.Context, *TorreRequest) (*TorreReply, error)
	mustEmbedUnimplementedTorreServer()
}

// UnimplementedTorreServer must be embedded to have forward compatible implementations.
type UnimplementedTorreServer struct {
}

func (UnimplementedTorreServer) TorrePredict(context.Context, *TorreRequest) (*TorreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TorrePredict not implemented")
}
func (UnimplementedTorreServer) mustEmbedUnimplementedTorreServer() {}

// UnsafeTorreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TorreServer will
// result in compilation errors.
type UnsafeTorreServer interface {
	mustEmbedUnimplementedTorreServer()
}

func RegisterTorreServer(s grpc.ServiceRegistrar, srv TorreServer) {
	s.RegisterService(&Torre_ServiceDesc, srv)
}

func _Torre_TorrePredict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TorreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorreServer).TorrePredict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/torresix.Torre/TorrePredict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorreServer).TorrePredict(ctx, req.(*TorreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Torre_ServiceDesc is the grpc.ServiceDesc for Torre service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Torre_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "torresix.Torre",
	HandlerType: (*TorreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TorrePredict",
			Handler:    _Torre_TorrePredict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/torresix.proto",
}
